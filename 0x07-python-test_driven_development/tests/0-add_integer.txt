# 0-add_integer.txt
===============================
0. Integer addition module
===============================

Import module:
==============
    >>> add_integer = __import__('0-add_integer').add_integer


Function:
=========
Write a function using python programming language that adds 2 integers.


Operations:
===========
‘a’ and ‘b’ must be integers or floats, otherwise raise a TypeError exception
with the message 'a must be an integer' or 'b must be an integer'.

Oprand:
===========
'+' to sum up a parameter of datatype int and float with TypeError exception

Section // Non-Parameters
=========================

Test case #1: without both params

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

Test case #2: a with no value

    >>> add_integer(a, 123)
    Traceback (most recent call last):
    NameError: name 'a' is not defined

Test case #3: use default for parameter b

    >>> add_integer(2)
    100

Test case #4: use default for parameter b

    >>> add_integer(2.0, )
    100


Section // Numbers
==================

Test case #1: both datatype int

    >>> add_integer(1, 2)
    3

Test case #2: both floats

    >>> add_integer(100.3, 6.0)
    106.3

Test case #3: diffrent datatype int and float and viseversal

    >>> add_integer(6, 20.0)
    >>> add_integer(20.0, 6)
    26

Test case #4: both negative float

    >>> add_integer(-5.3, -2.0)
    -7

Test case #5: datatype postive float and negative int 

    >>> add_integer(100.3, -2)
    98

Section // Non-Numbers
======================

Test case #1: a parameter None

    >>> add_integer(None, 2)
    Traceback (most recent call last):
    TypeError: a must be an integer

Test case #2: b parameter is None

    >>> add_integer(2, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

Test case #3: b parameter of type 'str'

    >>> add_integer(1, "School")
    Traceback (most recent call last):
    TypeError: b must be an integer


Section // Types
======================

Test case 1# Return type

    >>> type(add_integer(2, 4))
    <class 'int'>
